// If you'd like to override the default keybindings completely, be sure to change "keybinds" to "keybinds clear-defaults=true"
keybinds clear-defaults=true {

  // tmux mode is the command mode, activated by leader key (Ctrl Space)
  tmux {
    bind "Ctrl space" { Write 2; SwitchToMode "normal"; }
    bind "s" { SwitchToMode "scroll"; }
    bind "w" { SwitchToMode "pane"; }
    bind "t" { SwitchToMode "tab"; }
    bind "r" { SwitchToMode "resize"; }
    bind "q" { SwitchToMode "session"; }
    bind "v" { SwitchToMode "move"; }

    // panes
    // bind "Shift d" { NewPane "down"; SwitchToMode "normal"; }
    // bind "d" { NewPane "right"; SwitchToMode "normal"; }
    // bind "h" { MoveFocusOrTab "left"; SwitchToMode "normal"; }
    // bind "l" { MoveFocusOrTab "right"; SwitchToMode "normal"; }
    // bind "j" { MoveFocus "down"; SwitchToMode "normal"; }
    // bind "k" { MoveFocus "up"; SwitchToMode "normal"; }
    bind "n" { NewPane; SwitchToMode "normal"; }
    bind "p" { TogglePaneFrames; SwitchToMode "normal"; }
    bind "m" { ToggleFocusFullscreen; SwitchToMode "normal"; } // zoom
    bind "f" { ToggleFloatingPanes; SwitchToMode "normal"; }
    bind "c" { Clear; SwitchToMode "normal";}
    bind "]" { NextSwapLayout; }
    bind "[" { PreviousSwapLayout; }

    // tabs
    bind "tab" { ToggleTab; SwitchToMode "normal"; }
    bind "h" { GoToPreviousTab; SwitchToMode "normal"; }
    bind "l" { GoToNextTab; SwitchToMode "normal"; }
    bind "1" { GoToTab 1; SwitchToMode "normal"; }
    bind "2" { GoToTab 2; SwitchToMode "normal"; }
    bind "3" { GoToTab 3; SwitchToMode "normal"; }
    bind "4" { GoToTab 4; SwitchToMode "normal"; }
    bind "5" { GoToTab 5; SwitchToMode "normal"; }
    bind "6" { GoToTab 6; SwitchToMode "normal"; }
    bind "7" { GoToTab 7; SwitchToMode "normal"; }
    bind "8" { GoToTab 8; SwitchToMode "normal"; }
    bind "9" { GoToTab 9; SwitchToMode "normal"; }

    // search
    bind "/" { SwitchToMode "entersearch"; SearchInput 0; }
  }
  normal {
    bind "Enter" { // Intercept `Enter`.
      WriteChars "\u{000D}"; // Passthru `Enter`.
      // Invoke autolock to immediately assess proper lock state.
      // (This provides a snappier experience compared to
      // solely relying on `reaction_seconds` to elapse.)
      MessagePlugin "autolock" {};
    }
  }
  locked {
    bind "Alt z" {
      // Disable the autolock plugin.
      MessagePlugin "autolock" {payload "disable";};
      // Unlock Zellij.
      SwitchToMode "normal";
    }
  }
  shared {
    bind "Alt Shift z" {
      // Enable the autolock plugin.
      MessagePlugin "autolock" {payload "enable";};
    }
    //...
  }
  // Keybindings directly accessible without leader key
  shared_except "tmux" {
    bind "Ctrl Space" { SwitchToMode "tmux"; } // leader go to tmux mode from any mode
    bind "Alt =" "Alt +" { Resize "Increase"; }
    bind "Alt -" { Resize "Decrease"; }
    bind "Alt h" { GoToPreviousTab; }
    bind "Alt l" { GoToNextTab; }
  }
  // I use autolock for particular apps/front processes
  // These are the keybindings I want to pass to apps and let them handle
  shared_except "locked" {
    bind "Alt z" {
      // Disable the autolock plugin.
      MessagePlugin "autolock" {payload "disable";};
      // Lock Zellij.
      SwitchToMode "locked";
    }
    bind "Ctrl h" { MoveFocusOrTab "left"; }
    bind "Ctrl l" { MoveFocusOrTab "right"; }
    bind "Ctrl j" { MoveFocus "down"; }
    bind "Ctrl k" { MoveFocus "up"; }
  }
  // In tmux and all action modes, esc or enter to switch back to normal mode
  shared_except "normal" "locked" "entersearch" "renamepane" "renametab" {
    bind "esc" "enter" { SwitchToMode "normal"; } 
  }
  pane {
    bind "h" "left" { MoveFocus "left"; }
    bind "l" "right" { MoveFocus "right"; }
    bind "j" "down" { MoveFocus "down"; }
    bind "k" "up" { MoveFocus "up"; }
    bind "w" { NewPane; SwitchToMode "normal"; }
    bind "s" { NewPane "down"; SwitchToMode "normal"; }
    bind "v" { NewPane "right"; SwitchToMode "normal"; }
    bind "d" { CloseFocus; SwitchToMode "normal"; }
    bind "m" { ToggleFocusFullscreen; SwitchToMode "normal"; }
    bind "f" { ToggleFloatingPanes; SwitchToMode "normal"; }
    bind "e" { TogglePaneEmbedOrFloating; SwitchToMode "normal"; }
    bind "r" { SwitchToMode "renamepane"; PaneNameInput 0;}
  }
  move {
    bind "n" { MovePane; } // move pane forward
    bind "p" { MovePaneBackwards; }
    bind "h" "left" { MovePane "left"; }
    bind "j" "down" { MovePane "down"; }
    bind "k" "up" { MovePane "up"; }
    bind "l" "right" { MovePane "right"; }
    bind "]" { BreakPaneRight;}  // move a pane to a different tab (if it's a tab, converted to a pane)
    bind "[" { BreakPaneLeft;}
    bind "b" { BreakPane; SwitchToMode "normal"; }  // convert a pane to a tab
    bind "{" { MoveTab "left"; }
    bind "}" { MoveTab "right"; }
  } 
  resize {
    bind "h" "left" { Resize "Increase left"; }
    bind "j" "down" { Resize "Increase down"; }
    bind "k" "up" { Resize "Increase up"; }
    bind "l" "right" { Resize "Increase right"; }
    bind "H" { Resize "Decrease left"; }
    bind "J" { Resize "Decrease down"; }
    bind "K" { Resize "Decrease up"; }
    bind "L" { Resize "Decrease right"; }
    bind "=" "+" { Resize "Increase"; }
    bind "-" { Resize "Decrease"; }
  }
  tab {
    bind "t" { NewTab; SwitchToMode "normal"; }
    bind "r" { SwitchToMode "renametab"; TabNameInput 0; }
    bind "h" "left" "up" "k" { GoToPreviousTab; }
    bind "l" "right" "down" "j" { GoToNextTab; }
    bind "d" { CloseTab; SwitchToMode "normal"; }
    bind "s" { ToggleActiveSyncTab; SwitchToMode "normal"; }
  }
  shared_among "scroll" "search" {
    bind "Ctrl c" { ScrollToBottom; SwitchToMode "normal"; } // cancel
    bind "j" "down" { ScrollDown; }
    bind "k" "up" { ScrollUp; }
    bind "g" { ScrollToTop; }
    bind "G" { ScrollToBottom; }
    bind "Ctrl d" { HalfPageScrollDown; }
    bind "Ctrl u" { HalfPageScrollUp; }
    bind "Ctrl f" "PageDown" "right" "l" { PageScrollDown; }
    bind "Ctrl b" "PageUp" "left" "h" { PageScrollUp; }
  }
  scroll {
    bind "e" { EditScrollback; SwitchToMode "normal"; }
    bind "s" { SwitchToMode "entersearch"; SearchInput 0; }
  }
  search {
    bind "n" { Search "up"; }    // makes more sense since first highlighted result is always at the bottom
    bind "p" "N" { Search "down"; }
    bind "c" { SearchToggleOption "CaseSensitivity"; }
    bind "w" { SearchToggleOption "Wrap"; }
    bind "o" { SearchToggleOption "WholeWord"; }
  }
  entersearch {
    bind "Ctrl c" { SwitchToMode "normal"; }
    bind "esc"    { SwitchToMode "scroll"; }
    bind "enter" { SwitchToMode "search"; }
  }
  renametab {
    bind "Ctrl c" { UndoRenameTab; SwitchToMode "normal"; }
    bind "esc" { UndoRenameTab; SwitchToMode "tab"; }
    bind "enter" { SwitchToMode "normal"; } // confirm
  }
  renamepane {
    bind "Ctrl c" { UndoRenamePane; SwitchToMode "normal"; }
    bind "esc" { UndoRenamePane; SwitchToMode "pane"; }
    bind "enter" { SwitchToMode "normal"; } // confirm
  }
  session {
    bind "q" { Detach; }
    bind "d" { Quit; }    // basically "delete session"
    bind "w" {
      LaunchOrFocusPlugin "session-manager" {
        floating true
        move_to_focused_tab true
      };
      SwitchToMode "normal"
    }
    bind "c" {
      LaunchOrFocusPlugin "configuration" {
        floating true
        move_to_focused_tab true
      }
      SwitchToMode "normal"
    }
    bind "p" {
      LaunchOrFocusPlugin "plugin-manager" {
        floating true
        move_to_focused_tab true
      }
      SwitchToMode "normal"
    }
  }
}

// Plugin aliases - can be used to change the implementation of Zellij
// changing these requires a restart to take effect
plugins {
    compact-bar location="zellij:compact-bar"
    configuration location="zellij:configuration"
    filepicker location="zellij:strider" {
        cwd "/"
    }
    plugin-manager location="zellij:plugin-manager"
    session-manager location="zellij:session-manager"
    status-bar location="zellij:status-bar"
    strider location="zellij:strider"
    tab-bar location="zellij:tab-bar"
    welcome-screen location="zellij:session-manager" {
        welcome_screen true
    }

// Calling up fzf with keybindings (e.g. ctrl-r) won't trigger
// There are some workarounds (https://github.com/fresh2dev/zellij-autolock/issues/12) but not nice
// So I use ctrl-n/p to move up/down in fzf
autolock location="file:~/.config/zellij/plugins/zellij-autolock.wasm" {
        // Enabled at start?
        is_enabled true
        // Lock when any open these programs open.
        triggers "nvim|vim|git|fzf|zoxide|atuin"
        // Reaction to input occurs after this many seconds. (default=0.3)
        // (An existing scheduled reaction prevents additional reactions.)
        reaction_seconds "0.3"
        // Print to Zellij log? (default=false)
        print_to_log true
    }
}

// Plugins to load in the background when a new session starts
// eg. "file:/path/to/my-plugin.wasm"
// eg. "https://example.com/my-plugin.wasm"
load_plugins {
    autolock
}


// Use a simplified UI without special fonts (arrow glyphs)
// Options:
//   - true
//   - false (Default)
// 
// simplified_ui true
 
// Choose the theme that is specified in the themes section.
// Default: default
// 
theme "catppuccin-mocha"
 
// Choose the base input mode of zellij.
// Default: normal
// 
// default_mode "locked"
 
// Choose the path to the default shell that zellij will use for opening new panes
// Default: $SHELL
// 
// default_shell "fish"
 
// Choose the path to override cwd that zellij will use for opening new panes
// 
// default_cwd "/tmp"
 
// The name of the default layout to load on startup
// Default: "default"
// 
default_layout "zjstatus"
 
// The folder in which Zellij will look for layouts
// (Requires restart)
// 
// layout_dir "/tmp"
 
// The folder in which Zellij will look for themes
// (Requires restart)
// 
// theme_dir "/tmp"
 
// Toggle enabling the mouse mode.
// On certain configurations, or terminals this could
// potentially interfere with copying text.
// Options:
//   - true (default)
//   - false
// 
// mouse_mode false
 
// Toggle having pane frames around the panes
// Options:
//   - true (default, enabled)
//   - false
// 
// pane_frames false
 
// When attaching to an existing session with other users,
// should the session be mirrored (true)
// or should each user have their own cursor (false)
// (Requires restart)
// Default: false
// 
// mirror_session true
 
// Choose what to do when zellij receives SIGTERM, SIGINT, SIGQUIT or SIGHUP
// eg. when terminal window with an active zellij session is closed
// (Requires restart)
// Options:
//   - detach (Default)
//   - quit
// 
// on_force_close "quit"
 
// Configure the scroll back buffer size
// This is the number of lines zellij stores for each pane in the scroll back
// buffer. Excess number of lines are discarded in a FIFO fashion.
// (Requires restart)
// Valid values: positive integers
// Default value: 10000
// 
// scroll_buffer_size 10000
 
// Provide a command to execute when copying text. The text will be piped to
// the stdin of the program to perform the copy. This can be used with
// terminal emulators which do not support the OSC 52 ANSI control sequence
// that will be used by default if this option is not set.
// Examples:
//
// copy_command "xclip -selection clipboard" // x11
// copy_command "wl-copy"                    // wayland
// copy_command "pbcopy"                     // osx
// 
// copy_command "pbcopy"
 
// Choose the destination for copied text
// Allows using the primary selection buffer (on x11/wayland) instead of the system clipboard.
// Does not apply when using copy_command.
// Options:
//   - system (default)
//   - primary
// 
// copy_clipboard "primary"
 
// Enable automatic copying (and clearing) of selection when releasing mouse
// Default: true
// 
// copy_on_select true
 
// Path to the default editor to use to edit pane scrollbuffer
// Default: $EDITOR or $VISUAL
// scrollback_editor "/usr/bin/vim"
 
// A fixed name to always give the Zellij session.
// Consider also setting `attach_to_session true,`
// otherwise this will error if such a session exists.
// Default: <RANDOM>
// 
// session_name "My singleton session"
 
// When `session_name` is provided, attaches to that session
// if it is already running or creates it otherwise.
// Default: false
// 
// attach_to_session true
 
// Toggle between having Zellij lay out panes according to a predefined set of layouts whenever possible
// Options:
//   - true (default)
//   - false
// 
// auto_layout false
 
// Whether sessions should be serialized to the cache folder (including their tabs/panes, cwds and running commands) so that they can later be resurrected
// Options:
//   - true (default)
//   - false
// 
// session_serialization false
 
// Whether pane viewports are serialized along with the session, default is false
// Options:
//   - true
//   - false (default)
// 
// serialize_pane_viewport false
 
// Scrollback lines to serialize along with the pane viewport when serializing sessions, 0
// defaults to the scrollback size. If this number is higher than the scrollback size, it will
// also default to the scrollback size. This does nothing if `serialize_pane_viewport` is not true.
// 
// scrollback_lines_to_serialize 10000
 
// Enable or disable the rendering of styled and colored underlines (undercurl).
// May need to be disabled for certain unsupported terminals
// (Requires restart)
// Default: true
// 
// styled_underlines false
 
// How often in seconds sessions are serialized
// 
// serialization_interval 10000
 
// Enable or disable writing of session metadata to disk (if disabled, other sessions might not know
// metadata info on this session)
// (Requires restart)
// Default: false
// 
// disable_session_metadata false
 
// Enable or disable support for the enhanced Kitty Keyboard Protocol (the host terminal must also support it)
// (Requires restart)
// Default: true (if the host terminal supports it)
// 
support_kitty_keyboard_protocol false

